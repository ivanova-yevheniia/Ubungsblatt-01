import java.awt.*;

/**
 * A Star that can be manipulated and that draws itself on a canvas.
 * 
 * @author  Matrikelnummer 3542523
 * @version 1
 */

public class MyStar
{
    private int innerR;
    private int ausserR;
    private int Vertex;
    private int xPosition;
    private int yPosition;
    private String color;
    private boolean isVisible;

    /**
     * Create a new star at default position and number of vertices  with default color.
     */
    public MyStar()
    {
        innerR = 20;
        ausserR = 35;
        Vertex = 5;
        xPosition = 150;
        yPosition = 150;
        color = "yellow";
        isVisible = false;
    }

    /**
     * Make this star visible. If it was already visible, do nothing.
     */
    public void makeVisible()
    {
        isVisible = true;
        draw();
    }

    /**
     * Make this star invisible. If it was already invisible, do nothing.
     */
    public void makeInvisible()
    {
        erase();
        isVisible = false;
    }

    /**
     * Move the star a few pixels to the right.
     */
    public void moveRight()
    {
        moveHorizontal(20);
    }

    /**
     * Move the star a few pixels to the left.
     */
    public void moveLeft()
    {
        moveHorizontal(-20);
    }

    /**
     * Move the star a few pixels up.
     */
    public void moveUp()
    {
        moveVertical(-20);
    }

    /**
     * Move the star a few pixels down.
     */
    public void moveDown()
    {
        moveVertical(20);
    }

    /**
     * Move the star horizontally by 'distance' pixels.
     */
    public void moveHorizontal(int distance)
    {
        erase();
        xPosition += distance;
        draw();
    }

    /**
     * Move the star vertically by 'distance' pixels.
     */
    public void moveVertical(int distance)
    {
        erase();
        yPosition += distance;
        draw();
    }

    /**
     * Slowly move the star horizontally by 'distance' pixels.
     */
    public void slowMoveHorizontal(int distance)
    {
        int delta;

        if(distance < 0) 
        {
            delta = -1;
            distance = -distance;
        }
        else 
        {
            delta = 1;
        }

        for(int i = 0; i < distance; i++)
        {
            xPosition += delta;
            draw();
        }
    }

    /**
     * Slowly move the star vertically by 'distance' pixels.
     */
    public void slowMoveVertical(int distance)
    {
        int delta;

        if(distance < 0) 
        {
            delta = -1;
            distance = -distance;
        }
        else 
        {
            delta = 1;
        }

        for(int i = 0; i < distance; i++)
        {
            yPosition += delta;
            draw();
        }
    }

    /**
     * Change the size to the new size (in pixels). Size must be >= 0.
     */
    public void changeSize(int newInnerR, int newAusserR)
    {
        erase();
        innerR = newInnerR;
        ausserR = newAusserR;
        draw();
    }
    /**
     * Change the number of vertices
     */
    public void changeVertex(int newVertex)
    {
        erase();
        Vertex = newVertex;
        draw();
    }

    /**
     * Change the color. Valid colors are "red", "yellow", "blue", "green",
     * "magenta" and "black".
     */
    public void changeColor(String newColor)
    {
        color = newColor;
        draw();
    }

    /*
     * Draw the triangle with current specifications on screen.
     */
    private void draw()
    {
        if(isVisible) {
            Canvas canvas = Canvas.getCanvas();
            double Angle = Math.PI/Vertex;
            double value = 0; 
            int[] xpoints = new int[Vertex*2];
            int[] ypoints = new int[Vertex*2];
            for(int i = 0; i<2*Vertex; i++){
              value = value+Angle;
              xpoints[i] = xPosition + (int)(((i%2==0)?innerR:ausserR) * Math.cos(value));
              ypoints[i] = yPosition + (int)(((i%2==0)?innerR:ausserR) * Math.sin(value));
            }
            canvas.draw(this, color, new Polygon(xpoints, ypoints, 2*Vertex));
            canvas.wait(10);
        }
    }

    /*
     * Erase the star on screen.
     */
    private void erase()
    {
        if(isVisible) {
            Canvas canvas = Canvas.getCanvas();
            canvas.erase(this);
        }
    }
}
